import serial
import tkinter as tk
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import matplotlib.pyplot as plt
import time
import re  # Regular expressions

# Avaa sarjaportti (muokkaa porttia ja nopeutta tarvittaessa)
ser = serial.Serial('COM4', 115200)

# Alusta Tkinter-ikkuna
window = tk.Tk()
window.title("Real-Time Data Visualization")

# Alustetaan kaksi kuvaajaa (yksi paineelle ja yksi lämpötilalle)
fig_pressure, ax_pressure = plt.subplots()
fig_temperature, ax_temperature = plt.subplots()

# Asetetaan paineen kuvaajan akselit ja otsikot
ax_pressure.set_xlabel("Time (s)")
ax_pressure.set_ylabel("Pressure (hPa)")
ax_pressure.set_title("Pressure vs Time")

# Asetetaan lämpötilan kuvaajan akselit ja otsikot
ax_temperature.set_xlabel("Time (s)")
ax_temperature.set_ylabel("Temperature (°C)")
ax_temperature.set_title("Temperature vs Time")

# Tyhjä viiva paineelle ja lämpötilalle
line_pressure, = ax_pressure.plot([], [], label="Pressure", color='blue')
line_temperature, = ax_temperature.plot([], [], label="Temperature", color='red')

# Lisää selite
ax_pressure.legend()
ax_temperature.legend()

# Tiedoston polku
data_file = "dataa.txt"

# Aikadata, paine ja lämpötila
time_data = []
pressure_data = []
temperature_data = []


# Funktio, joka lukee dataa ja päivittää kuvaajat
def update_plot():
    if ser.in_waiting:
        # Lue data ja dekoodaa
        data = ser.readline().decode('utf-8', errors='ignore').strip()

        # Printtaa data konsoliin
        print(data)

        # Tallenna data tiedostoon
        with open(data_file, 'a') as f:
            f.write(data + "\n")

        # Käytetään regexiä datan purkamiseen
        match = re.search(r"Pressure:\s*([\d.]+)hPa\s*temperature:\s*([\d.]+)\*C", data)

        if match:
            # Poimi paine ja lämpötila regexistä
            pressure = float(match.group(1))
            temperature = float(match.group(2))

            # Lisää data listalle
            current_time = time.time()
            time_data.append(current_time)
            pressure_data.append(pressure)
            temperature_data.append(temperature)

            # Päivitä paineen ja lämpötilan viivojen data
            line_pressure.set_data(time_data, pressure_data)
            line_temperature.set_data(time_data, temperature_data)

            # Säädä akselien rajat molemmille kuvaajille
            ax_pressure.relim()
            ax_pressure.autoscale_view()
            ax_temperature.relim()
            ax_temperature.autoscale_view()

            # Piirrä uusi kaavio
            canvas_pressure.draw()
            canvas_temperature.draw()

    # Kutsu update_plot funktiota uudestaan 2000 millisekunnin kuluttua
    window.after(2000, update_plot)


# Luo matplotlib canvas ja upota se Tkinteriin (paineen kuvaaja)
canvas_pressure = FigureCanvasTkAgg(fig_pressure, master=window)
canvas_pressure.get_tk_widget().pack(side=tk.LEFT, fill=tk.BOTH, expand=True)

# Luo matplotlib canvas ja upota se Tkinteriin (lämpötilan kuvaaja)
canvas_temperature = FigureCanvasTkAgg(fig_temperature, master=window)
canvas_temperature.get_tk_widget().pack(side=tk.LEFT, fill=tk.BOTH, expand=True)

# Käynnistä datan päivitys
update_plot()

# Käynnistä Tkinter looppi
window.mainloop()
